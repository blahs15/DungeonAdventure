#BlueJ class context
comment0.params=expGained
comment0.target=void\ gainExp(int)
comment0.text=\ gain\ a\ certain\ amount\ of\ experience,\ and\ checks\ if\ the\ Hero\ has\ leveled\ up\n\ @param\ amount\ of\ exp\ gained\n
comment1.params=
comment1.target=void\ lvlUp()
comment1.text=levels\ up\ the\ hero,\ must\ be\ overridden\ to\ increase\ the\ stats\ of\ the\ Hero\n
comment10.params=defender
comment10.target=void\ attack(Character)
comment10.text=attack\ moves\ for\ each\ Hero\ to\ have\n\ @param\ the\ enemy\ to\ attack\n
comment11.params=defender
comment11.target=void\ powerAttack(Character)
comment12.params=defender
comment12.target=void\ aimedAttack(Character)
comment13.params=
comment13.target=void\ rest()
comment14.params=
comment14.target=void\ recover()
comment14.text=recover\ some\ HP\ after\ winning\ a\ battle\n
comment15.params=
comment15.target=void\ calculateStats()
comment15.text=calculates\ the\ stats\ given\ to\ the\ Hero\ by\ the\ equipment\ being\ worn\n
comment16.params=e
comment16.target=void\ equip(Equipment)
comment16.text=asks\ the\ player\ if\ he\ wants\ to\ equip\ the\ equipment\ found,\ if\ possible\n\ puts\ the\ equipment\ in\ the\ appropriate\ equips[]\ slot\n\ @param\ the\ Equipment\ found\n
comment17.params=e
comment17.target=boolean\ equipUsable(Equipment)
comment17.text=specific\ to\ each\ Hero\ checks\ if\ an\ equipment\ can\ be\ equipped\ by\ the\ Hero\n\ @param\ the\ Equipment\ being\ checked\n\ @return\ false\ if\ the\ Equipment\ can\ not\ be\ used,\ else\ true\n
comment18.params=currentE\ newE
comment18.target=boolean\ checkEquip(Equipment,\ Equipment)
comment18.text=asks\ whether\ player\ wants\ to\ equip\ the\ Equipment\n\ @param\ current\ Equipment\n\ @param\ new\ Equipment\n\ @return\ true\ if\ the\ player\ wants\ to\ equip\ the\ Equipment\n
comment19.params=cE\ nE
comment19.target=java.lang.String\ compareEquips(Equipment,\ Equipment)
comment19.text=compares\ stats\ of\ current\ Equipment\ and\ new\ Equipment\n\ @param\ current\ Equipment\n\ @param\ new\ Equipment\n\ @return\ String\ of\ stats\ comparison\n
comment2.params=move
comment2.target=void\ addAttackMove(java.lang.String)
comment2.text=adds\ an\ attack\ move\ to\ the\ moves\ ArrayList\ of\ attack\ moves\n\ @param\ name\ of\ the\ attack\ move\n
comment20.params=
comment20.target=void\ setStartingEquips()
comment20.text=intializes\ the\ starting\ Equipment\n\ to\ only\ be\ called\ in\ constructors\ of\ each\ Hero\n
comment21.params=e
comment21.target=void\ setEquip0(Equipment)
comment21.text=setters\ and\ getters\ for\ first\ two\ Equipment\ slots\n\ to\ be\ called\ by\ subclasses,\ as\ first\ two\ slots\ hold\ Equipment\ specific\ to\ each\ Hero\n
comment22.params=
comment22.target=Equipment\ getEquip0()
comment23.params=e
comment23.target=void\ setEquip1(Equipment)
comment24.params=
comment24.target=Equipment\ getEquip1()
comment25.params=
comment25.target=int\ getAtt()
comment25.text=getters\ and\ setters\ for\ all\ stats\ and\ other\ instance\ variables\n\ stats\ getters\ add\ Equipment\ stats\n
comment26.params=
comment26.target=int\ getMagicAtt()
comment27.params=
comment27.target=int\ getDef()
comment28.params=
comment28.target=int\ getMagicDef()
comment29.params=
comment29.target=int\ getSpd()
comment3.params=name
comment3.target=Hero(java.lang.String)
comment3.text=\ initializes\ the\ name,\ lvl,\ starting\ equipment,\ and\ basic\ moves\n\ @param\ name\ of\ the\ hero\n
comment30.params=
comment30.target=int\ getEvasion()
comment31.params=
comment31.target=int\ getAccuracy()
comment32.params=
comment32.target=int\ getMaxHP()
comment33.params=
comment33.target=int\ getMaxSP()
comment34.params=
comment34.target=int\ getEAtt()
comment35.params=
comment35.target=int\ getEMagicAtt()
comment36.params=
comment36.target=int\ getEDef()
comment37.params=
comment37.target=int\ getEMagicDef()
comment38.params=
comment38.target=int\ getESpd()
comment39.params=
comment39.target=int\ getEEvasion()
comment4.params=enemy
comment4.target=void\ chooseMove(Monster)
comment4.text=makes\ the\ Hero\ do\ a\ basic\ attack\ to\ an\ enemy\n\ only\ a\ temporary\ method\ until\ battle\ System\ works\ properly\n\ @param\ enemy\ to\ attack\n
comment40.params=
comment40.target=int\ getEAccuracy()
comment41.params=
comment41.target=int\ getEMaxHP()
comment42.params=
comment42.target=int\ getEMaxSP()
comment43.params=
comment43.target=int\ getLvl()
comment44.params=
comment44.target=int\ getExp()
comment45.params=
comment45.target=int\ getExpToLvl()
comment46.params=
comment46.target=java.util.ArrayList\ getMoves()
comment47.params=
comment47.target=java.lang.String\ toString()
comment48.params=
comment48.target=java.lang.String\ getHeroType()
comment5.params=attack\ enemy
comment5.target=void\ chooseMove(int,\ Monster)
comment5.text=chooses\ the\ attack\ move\ to\ use\ against\ an\ enemy\n\ should\ only\ be\ called\ when\ player\ presses\ buttons\ to\ choose\ the\ attack\n\ @param\ the\ int\ representing\ which\ attack\ method\ to\ be\ called\n\ @param\ the\ enemy\ to\ be\ attacked\n
comment6.params=hasAttacked
comment6.target=void\ setHasAttacked(boolean)
comment6.text=setter\ and\ getter\ for\ a\ boolean\ that\ is\ true\ if\ the\ Hero\ has\ already\ attacked\ the\ monster\ or\ not\n
comment7.params=
comment7.target=boolean\ getHasAttacked()
comment8.params=attackName
comment8.target=void\ dodge(java.lang.String)
comment9.params=
comment9.target=void\ guard()
numComments=49
